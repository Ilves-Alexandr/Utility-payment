{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\San\\\\Desktop\\\\projects\\\\testTest \\u2014 \\u043A\\u043E\\u043F\\u0438\\u044F\\\\client\\\\src\\\\components\\\\AddTransaction.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import axios from 'axios';\n\n// const AddTransaction = () => {\n//   const [amountBilled, setAmountBilled] = useState('');\n//   const [amountPaid, setAmountPaid] = useState('');\n//   const [error, setError] = useState('');\n//   const [success, setSuccess] = useState('');\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     // Преобразование строк в числа\n//     const billed = Number(amountBilled);\n//     const paid = Number(amountPaid);\n\n//     // Проверка на валидность чисел\n//     if (isNaN(billed) || isNaN(paid)) {\n//       alert('Пожалуйста, введите корректные числовые значения.');\n//       return;\n//     }\n\n//     const transaction = { amountBilled: billed, amountPaid: paid };\n\n//     try {\n//       await axios.post('http://localhost:5000/api/transaction',\n//         transaction,\n//         {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem('token')}`,\n//           },\n//         });\n\n//       setSuccess('Транзакция успешно добавлена');\n//       setAmountBilled('');\n//       setAmountPaid('');\n//     } catch (err) {\n//       setError(err.response ? err.response.data.msg : 'Что-то пошло не так!');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Добавить транзакцию</h1>\n//       <form onSubmit={handleSubmit}>\n//         <div>\n//           <label>В настоящий момент начислено(руб.): </label>\n//           <input\n//             type=\"number\"\n//             name='amountBilled'\n//             value={amountBilled}\n//             onChange={(e) => setAmountBilled(e.target.value)}\n//             required\n//             min=\"0\"\n//             step=\"0.01\"\n//           />\n//         </div>\n//         <div>\n//           <label>В настоящий момент оплачено(руб.): </label>\n//           <input\n//             type=\"number\"\n//             name='amountPaid'\n//             value={amountPaid}\n//             onChange={(e) => setAmountPaid(e.target.value)}\n//             required\n//             min=\"0\"\n//             step=\"0.01\"\n//           />\n//         </div>\n//         <button type=\"submit\">Добавить транзакцию</button>\n//       </form>\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\n//       {success && <p style={{ color: 'green' }}>{success}</p>}\n//     </div>\n//   );\n// };\n\n// export default AddTransaction;\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { TextField, Button, Box, Typography } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddTransaction = () => {\n  _s();\n  const [amountBilled, setAmountBilled] = useState('');\n  const [amountPaid, setAmountPaid] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Преобразование строк в числа\n    const billed = Number(amountBilled);\n    const paid = Number(amountPaid);\n\n    // Проверка на валидность чисел\n    if (isNaN(billed) || isNaN(paid)) {\n      alert('Пожалуйста, введите корректные числовые значения.');\n      return;\n    }\n    const transaction = {\n      amountBilled: billed,\n      amountPaid: paid\n    };\n    try {\n      await axios.post('http://localhost:5000/api/transaction', transaction, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n      setSuccess('Транзакция успешно добавлена');\n      setAmountBilled('');\n      setAmountPaid('');\n    } catch (err) {\n      setError(err.response ? err.response.data.msg : 'Что-то пошло не так!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      maxWidth: 400,\n      margin: '0 auto',\n      padding: 3,\n      boxShadow: 2,\n      borderRadius: 2,\n      backgroundColor: '#f9f9f9'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h5\",\n      gutterBottom: true,\n      children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0442\\u0440\\u0430\\u043D\\u0437\\u0430\\u043A\\u0446\\u0438\\u044E\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        mb: 2,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"\\u0412 \\u043D\\u0430\\u0441\\u0442\\u043E\\u044F\\u0449\\u0438\\u0439 \\u043C\\u043E\\u043C\\u0435\\u043D\\u0442 \\u043D\\u0430\\u0447\\u0438\\u0441\\u043B\\u0435\\u043D\\u043E (\\u0440\\u0443\\u0431.)\",\n          type: \"number\",\n          name: \"amountBilled\",\n          fullWidth: true,\n          value: amountBilled,\n          onChange: e => setAmountBilled(e.target.value),\n          required: true,\n          inputProps: {\n            min: \"0\",\n            step: \"0.01\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mb: 2,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"\\u0412 \\u043D\\u0430\\u0441\\u0442\\u043E\\u044F\\u0449\\u0438\\u0439 \\u043C\\u043E\\u043C\\u0435\\u043D\\u0442 \\u043E\\u043F\\u043B\\u0430\\u0447\\u0435\\u043D\\u043E (\\u0440\\u0443\\u0431.)\",\n          type: \"number\",\n          name: \"amountPaid\",\n          fullWidth: true,\n          value: amountPaid,\n          onChange: e => setAmountPaid(e.target.value),\n          required: true,\n          inputProps: {\n            min: \"0\",\n            step: \"0.01\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        type: \"submit\",\n        fullWidth: true,\n        children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0442\\u0440\\u0430\\u043D\\u0437\\u0430\\u043A\\u0446\\u0438\\u044E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"error\",\n      mt: 2,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this), success && /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"success\",\n      mt: 2,\n      children: success\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n_s(AddTransaction, \"ix8qjNNV0bti4qwDljQnwK7sZBg=\");\n_c = AddTransaction;\nexport default AddTransaction;\nvar _c;\n$RefreshReg$(_c, \"AddTransaction\");","map":{"version":3,"names":["React","useState","axios","TextField","Button","Box","Typography","jsxDEV","_jsxDEV","AddTransaction","_s","amountBilled","setAmountBilled","amountPaid","setAmountPaid","error","setError","success","setSuccess","handleSubmit","e","preventDefault","billed","Number","paid","isNaN","alert","transaction","post","headers","Authorization","localStorage","getItem","err","response","data","msg","sx","maxWidth","margin","padding","boxShadow","borderRadius","backgroundColor","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","mb","label","type","name","fullWidth","value","onChange","target","required","inputProps","min","step","color","mt","_c","$RefreshReg$"],"sources":["C:/Users/San/Desktop/projects/testTest — копия/client/src/components/AddTransaction.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const AddTransaction = () => {\r\n//   const [amountBilled, setAmountBilled] = useState('');\r\n//   const [amountPaid, setAmountPaid] = useState('');\r\n//   const [error, setError] = useState('');\r\n//   const [success, setSuccess] = useState('');\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n\r\n//     // Преобразование строк в числа\r\n//     const billed = Number(amountBilled);\r\n//     const paid = Number(amountPaid);\r\n\r\n//     // Проверка на валидность чисел\r\n//     if (isNaN(billed) || isNaN(paid)) {\r\n//       alert('Пожалуйста, введите корректные числовые значения.');\r\n//       return;\r\n//     }\r\n\r\n//     const transaction = { amountBilled: billed, amountPaid: paid };\r\n\r\n//     try {\r\n//       await axios.post('http://localhost:5000/api/transaction',\r\n//         transaction,\r\n//         {\r\n//           headers: {\r\n//             Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n//           },\r\n//         });\r\n\r\n//       setSuccess('Транзакция успешно добавлена');\r\n//       setAmountBilled('');\r\n//       setAmountPaid('');\r\n//     } catch (err) {\r\n//       setError(err.response ? err.response.data.msg : 'Что-то пошло не так!');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Добавить транзакцию</h1>\r\n//       <form onSubmit={handleSubmit}>\r\n//         <div>\r\n//           <label>В настоящий момент начислено(руб.): </label>\r\n//           <input\r\n//             type=\"number\"\r\n//             name='amountBilled'\r\n//             value={amountBilled}\r\n//             onChange={(e) => setAmountBilled(e.target.value)}\r\n//             required\r\n//             min=\"0\"\r\n//             step=\"0.01\"\r\n//           />\r\n//         </div>\r\n//         <div>\r\n//           <label>В настоящий момент оплачено(руб.): </label>\r\n//           <input\r\n//             type=\"number\"\r\n//             name='amountPaid'\r\n//             value={amountPaid}\r\n//             onChange={(e) => setAmountPaid(e.target.value)}\r\n//             required\r\n//             min=\"0\"\r\n//             step=\"0.01\"\r\n//           />\r\n//         </div>\r\n//         <button type=\"submit\">Добавить транзакцию</button>\r\n//       </form>\r\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\r\n//       {success && <p style={{ color: 'green' }}>{success}</p>}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default AddTransaction;\r\n\r\nimport React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { TextField, Button, Box, Typography } from '@mui/material';\r\n\r\nconst AddTransaction = () => {\r\n  const [amountBilled, setAmountBilled] = useState('');\r\n  const [amountPaid, setAmountPaid] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [success, setSuccess] = useState('');\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Преобразование строк в числа\r\n    const billed = Number(amountBilled);\r\n    const paid = Number(amountPaid);\r\n\r\n    // Проверка на валидность чисел\r\n    if (isNaN(billed) || isNaN(paid)) {\r\n      alert('Пожалуйста, введите корректные числовые значения.');\r\n      return;\r\n    }\r\n\r\n    const transaction = { amountBilled: billed, amountPaid: paid };\r\n\r\n    try {\r\n      await axios.post('http://localhost:5000/api/transaction', transaction, {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      setSuccess('Транзакция успешно добавлена');\r\n      setAmountBilled('');\r\n      setAmountPaid('');\r\n    } catch (err) {\r\n      setError(err.response ? err.response.data.msg : 'Что-то пошло не так!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        maxWidth: 400,\r\n        margin: '0 auto',\r\n        padding: 3,\r\n        boxShadow: 2,\r\n        borderRadius: 2,\r\n        backgroundColor: '#f9f9f9',\r\n      }}\r\n    >\r\n      <Typography variant=\"h5\" gutterBottom>\r\n        Добавить транзакцию\r\n      </Typography>\r\n      <form onSubmit={handleSubmit}>\r\n        <Box mb={2}>\r\n          <TextField\r\n            label=\"В настоящий момент начислено (руб.)\"\r\n            type=\"number\"\r\n            name=\"amountBilled\"\r\n            fullWidth\r\n            value={amountBilled}\r\n            onChange={(e) => setAmountBilled(e.target.value)}\r\n            required\r\n            inputProps={{ min: \"0\", step: \"0.01\" }}\r\n          />\r\n        </Box>\r\n        <Box mb={2}>\r\n          <TextField\r\n            label=\"В настоящий момент оплачено (руб.)\"\r\n            type=\"number\"\r\n            name=\"amountPaid\"\r\n            fullWidth\r\n            value={amountPaid}\r\n            onChange={(e) => setAmountPaid(e.target.value)}\r\n            required\r\n            inputProps={{ min: \"0\", step: \"0.01\" }}\r\n          />\r\n        </Box>\r\n        <Button variant=\"contained\" color=\"primary\" type=\"submit\" fullWidth>\r\n          Добавить транзакцию\r\n        </Button>\r\n      </form>\r\n      {error && (\r\n        <Typography color=\"error\" mt={2}>\r\n          {error}\r\n        </Typography>\r\n      )}\r\n      {success && (\r\n        <Typography color=\"success\" mt={2}>\r\n          {success}\r\n        </Typography>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default AddTransaction;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}