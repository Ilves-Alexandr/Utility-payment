{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\San\\\\Desktop\\\\projects\\\\testTest \\u2014 \\u043A\\u043E\\u043F\\u0438\\u044F\\\\client\\\\src\\\\components\\\\TransactionList.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n// import axios from 'axios';\n// import TransactionItem from './TransactionItem';\n// import EditTransaction from './EditTransaction';\n\n// const TransactionList = () => {\n//   const [transactions, setTransactions] = useState([]);\n//   const [totalAmountBilled, setTotalAmountBilled] = useState(0);  // Для хранения общей суммы начисленных средств\n//   const [totalPaid, setTotalPaid] = useState([]);  // Для хранения общей суммы оплаченных средств\n//   const [eachOneBill, setEachOneBill] = useState(0);  // Для хранения общей суммы начисленных средств  \n//   const [currentUser, setCurrentUser] = useState({}); // Для хранения информации о текущем пользователе\n//   const [editingTransactionId, setEditingTransactionId] = useState(null);\n//   const [error, setError] = useState('');\n\n//   // Функция для получения списка транзакций\n//   const fetchTransactions = async () => {\n//     try {\n//       const res = await axios.get('http://localhost:5000/api/transactions', {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n\n//       // Устанавливаем транзакции и другие данные в состояние\n//       setTransactions(res.data.transactions);  // Устанавливаем список транзакций\n//       setTotalAmountBilled(res.data.totalAmountBilled[0]?.total || 0);  // Устанавливаем общую сумму начисленных средств\n//       setTotalPaid(res.data.totalPaid);  // Устанавливаем данные об оплатах\n//       setEachOneBill(res.data.eachOneBill);  // Устанавливаем расчет долга\n//       setCurrentUser(res.data.currentUser); // Устанавливаем данные о текущем пользователе\n\n//     } catch (err) {\n//       setError(err.response ? err.response.data.msg : 'Something went wrong');\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchTransactions(); // Вызываем получение транзакций при загрузке компонента\n//   }, []);\n\n//   // Обработчик удаления транзакции\n//   const handleDelete = async (id) => {\n//     try {\n//       await axios.delete(`http://localhost:5000/api/transaction/${id}`, {\n//         headers: {\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\n//         },\n//       });\n\n//       // Удаляем транзакцию из состояния после успешного удаления\n//       setTransactions(transactions.filter(transaction => transaction._id !== id));\n//       // alert('Транзакция успешно удалена');\n//     } catch (error) {\n//       console.error('Ошибка при удалении транзакции:', error);\n//       setError('Ошибка при удалении транзакции');\n//     }\n//   };\n\n//   const handleEditClick = (id) => {\n//     setEditingTransactionId(id); // Устанавливаем ID для редактирования\n//   };\n\n//   // Функция для обновления транзакций после редактирования\n//   const handleUpdate = async () => {\n//     await fetchTransactions(); // Обновляем список транзакций после изменения\n//     setEditingTransactionId(null); // Сбрасываем редактируемую транзакцию\n//   };\n\n//   return (\n//     <div>\n//       <div>\n//         <Link to=\"/register\">\n//           <button type=\"submit\">Register</button>\n//         </Link>\n//       </div>\n//       <div>\n//         <Link to=\"/login\">\n//           <button type=\"submit\">Login</button>\n//         </Link>\n//       </div>\n//       <div>\n//         <Link to=\"/posts\">\n//           <button type=\"submit\">Новости</button>\n//         </Link>\n//       </div>\n//       <div>\n//         <h1>История транзакций</h1>\n\n//         {/* Отображение общей суммы начисленных и оплаченных средств */}\n//         <div>\n//           <p>Общая сумма начисленных средств: {totalAmountBilled}</p>\n//           <p>Сумма задолженности для пользователя {currentUser.username} / (ID: {currentUser.id}): {eachOneBill}</p>\n//           <p>Общая сумма оплаченных средств пользователями:</p>\n//           <ul>\n//             {totalPaid.map((userPayment, index) => (\n//               <li key={index}>\n//                 Пользователь: {userPayment?._id?.username || \"Неизвестно\"} / {userPayment?._id?._id || \"Неизвестно\"}, Оплачено: {userPayment?.total || 0}\n//               </li>\n//             ))}\n//           </ul>\n//         </div>\n//         <hr />\n\n//         <ul>\n//           {transactions.map((transaction) => (\n//             <li key={transaction._id}>\n//               <p>ID транзакции: {transaction._id}</p>\n//               <p>Добавлено пользователем (id): {transaction.user.username} / {transaction.user._id}</p>\n//               <p>Начислено: {transaction.amountBilled}</p>\n//               <p>Оплачено: {transaction.amountPaid}</p>\n//               <p>Сальдо: {transaction.balance}</p>\n//               <p>Долг: {transaction.debt}</p>\n//               <p>Дата и Время: {new Date(transaction.date).toLocaleString()}</p>\n//               <TransactionItem transaction={transaction} onDelete={() => handleDelete(transaction._id)} />\n//               <button onClick={() => handleEditClick(transaction._id)}>Редактировать</button>\n//             </li>\n//           ))}\n\n//           {editingTransactionId && (\n//             <EditTransaction transactionId={editingTransactionId} onUpdate={handleUpdate} />\n//           )}\n//         </ul>\n\n//         {error && <p style={{ color: 'red' }}>{error}</p>}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default TransactionList;\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionList = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [totalAmountBilled, setTotalAmountBilled] = useState(0);\n  const [totalPaid, setTotalPaid] = useState([]);\n  const [userDebts, setUserDebts] = useState([]);\n  const [error, setError] = useState('');\n\n  // Функция для получения транзакций и задолженностей\n  const fetchTransactions = async () => {\n    try {\n      var _res$data$totalAmount;\n      const res = await axios.get('http://localhost:5000/api/transactions', {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n\n      // Устанавливаем данные в состояние\n      setTransactions(res.data.transactions);\n      setTotalAmountBilled(((_res$data$totalAmount = res.data.totalAmountBilled[0]) === null || _res$data$totalAmount === void 0 ? void 0 : _res$data$totalAmount.total) || 0);\n      setTotalPaid(res.data.totalPaid);\n      setUserDebts(res.data.userDebts); // Устанавливаем задолженности\n    } catch (err) {\n      setError(err.response ? err.response.data.msg : 'Что-то пошло не так');\n    }\n  };\n  useEffect(() => {\n    fetchTransactions();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0418\\u0441\\u0442\\u043E\\u0440\\u0438\\u044F \\u0442\\u0440\\u0430\\u043D\\u0437\\u0430\\u043A\\u0446\\u0438\\u0439\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u0417\\u0430\\u0434\\u043E\\u043B\\u0436\\u0435\\u043D\\u043D\\u043E\\u0441\\u0442\\u0438 \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0435\\u0439\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: userDebts.map((debt, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"\\u041F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u044C: \", debt.user, \", \\u0414\\u043E\\u043B\\u0433: \", debt.debt, \", \\u041E\\u043F\\u043B\\u0430\\u0447\\u0435\\u043D\\u043E: \", debt.totalPaid]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u0422\\u0440\\u0430\\u043D\\u0437\\u0430\\u043A\\u0446\\u0438\\u0438\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"ID \\u0442\\u0440\\u0430\\u043D\\u0437\\u0430\\u043A\\u0446\\u0438\\u0438: \", transaction._id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u0414\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u043E \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0435\\u043C: \", transaction.user.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u041D\\u0430\\u0447\\u0438\\u0441\\u043B\\u0435\\u043D\\u043E: \", transaction.amountBilled]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u041E\\u043F\\u043B\\u0430\\u0447\\u0435\\u043D\\u043E: \", transaction.amountPaid]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u0421\\u0430\\u043B\\u044C\\u0434\\u043E: \", transaction.balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u0414\\u043E\\u043B\\u0433: \", transaction.debt]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }, this)]\n      }, transaction._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 167,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionList, \"saFQwvSjwB5vIqN9u8RzSGAn8Zc=\");\n_c = TransactionList;\nexport default TransactionList;\nvar _c;\n$RefreshReg$(_c, \"TransactionList\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","TransactionList","_s","transactions","setTransactions","totalAmountBilled","setTotalAmountBilled","totalPaid","setTotalPaid","userDebts","setUserDebts","error","setError","fetchTransactions","_res$data$totalAmount","res","get","headers","Authorization","localStorage","getItem","data","total","err","response","msg","children","fileName","_jsxFileName","lineNumber","columnNumber","map","debt","index","user","transaction","_id","username","amountBilled","amountPaid","balance","style","color","_c","$RefreshReg$"],"sources":["C:/Users/San/Desktop/projects/testTest — копия/client/src/components/TransactionList.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { Link } from 'react-router-dom';\r\n// import axios from 'axios';\r\n// import TransactionItem from './TransactionItem';\r\n// import EditTransaction from './EditTransaction';\r\n\r\n// const TransactionList = () => {\r\n//   const [transactions, setTransactions] = useState([]);\r\n//   const [totalAmountBilled, setTotalAmountBilled] = useState(0);  // Для хранения общей суммы начисленных средств\r\n//   const [totalPaid, setTotalPaid] = useState([]);  // Для хранения общей суммы оплаченных средств\r\n//   const [eachOneBill, setEachOneBill] = useState(0);  // Для хранения общей суммы начисленных средств  \r\n//   const [currentUser, setCurrentUser] = useState({}); // Для хранения информации о текущем пользователе\r\n//   const [editingTransactionId, setEditingTransactionId] = useState(null);\r\n//   const [error, setError] = useState('');\r\n\r\n//   // Функция для получения списка транзакций\r\n//   const fetchTransactions = async () => {\r\n//     try {\r\n//       const res = await axios.get('http://localhost:5000/api/transactions', {\r\n//         headers: {\r\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n//         },\r\n//       });\r\n\r\n//       // Устанавливаем транзакции и другие данные в состояние\r\n//       setTransactions(res.data.transactions);  // Устанавливаем список транзакций\r\n//       setTotalAmountBilled(res.data.totalAmountBilled[0]?.total || 0);  // Устанавливаем общую сумму начисленных средств\r\n//       setTotalPaid(res.data.totalPaid);  // Устанавливаем данные об оплатах\r\n//       setEachOneBill(res.data.eachOneBill);  // Устанавливаем расчет долга\r\n//       setCurrentUser(res.data.currentUser); // Устанавливаем данные о текущем пользователе\r\n\r\n\r\n//     } catch (err) {\r\n//       setError(err.response ? err.response.data.msg : 'Something went wrong');\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchTransactions(); // Вызываем получение транзакций при загрузке компонента\r\n//   }, []);\r\n\r\n//   // Обработчик удаления транзакции\r\n//   const handleDelete = async (id) => {\r\n//     try {\r\n//       await axios.delete(`http://localhost:5000/api/transaction/${id}`, {\r\n//         headers: {\r\n//           Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n//         },\r\n//       });\r\n\r\n//       // Удаляем транзакцию из состояния после успешного удаления\r\n//       setTransactions(transactions.filter(transaction => transaction._id !== id));\r\n//       // alert('Транзакция успешно удалена');\r\n//     } catch (error) {\r\n//       console.error('Ошибка при удалении транзакции:', error);\r\n//       setError('Ошибка при удалении транзакции');\r\n//     }\r\n//   };\r\n\r\n//   const handleEditClick = (id) => {\r\n//     setEditingTransactionId(id); // Устанавливаем ID для редактирования\r\n//   };\r\n\r\n//   // Функция для обновления транзакций после редактирования\r\n//   const handleUpdate = async () => {\r\n//     await fetchTransactions(); // Обновляем список транзакций после изменения\r\n//     setEditingTransactionId(null); // Сбрасываем редактируемую транзакцию\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <div>\r\n//         <Link to=\"/register\">\r\n//           <button type=\"submit\">Register</button>\r\n//         </Link>\r\n//       </div>\r\n//       <div>\r\n//         <Link to=\"/login\">\r\n//           <button type=\"submit\">Login</button>\r\n//         </Link>\r\n//       </div>\r\n//       <div>\r\n//         <Link to=\"/posts\">\r\n//           <button type=\"submit\">Новости</button>\r\n//         </Link>\r\n//       </div>\r\n//       <div>\r\n//         <h1>История транзакций</h1>\r\n\r\n//         {/* Отображение общей суммы начисленных и оплаченных средств */}\r\n//         <div>\r\n//           <p>Общая сумма начисленных средств: {totalAmountBilled}</p>\r\n//           <p>Сумма задолженности для пользователя {currentUser.username} / (ID: {currentUser.id}): {eachOneBill}</p>\r\n//           <p>Общая сумма оплаченных средств пользователями:</p>\r\n//           <ul>\r\n//             {totalPaid.map((userPayment, index) => (\r\n//               <li key={index}>\r\n//                 Пользователь: {userPayment?._id?.username || \"Неизвестно\"} / {userPayment?._id?._id || \"Неизвестно\"}, Оплачено: {userPayment?.total || 0}\r\n//               </li>\r\n//             ))}\r\n//           </ul>\r\n//         </div>\r\n//         <hr />\r\n\r\n//         <ul>\r\n//           {transactions.map((transaction) => (\r\n//             <li key={transaction._id}>\r\n//               <p>ID транзакции: {transaction._id}</p>\r\n//               <p>Добавлено пользователем (id): {transaction.user.username} / {transaction.user._id}</p>\r\n//               <p>Начислено: {transaction.amountBilled}</p>\r\n//               <p>Оплачено: {transaction.amountPaid}</p>\r\n//               <p>Сальдо: {transaction.balance}</p>\r\n//               <p>Долг: {transaction.debt}</p>\r\n//               <p>Дата и Время: {new Date(transaction.date).toLocaleString()}</p>\r\n//               <TransactionItem transaction={transaction} onDelete={() => handleDelete(transaction._id)} />\r\n//               <button onClick={() => handleEditClick(transaction._id)}>Редактировать</button>\r\n//             </li>\r\n//           ))}\r\n\r\n//           {editingTransactionId && (\r\n//             <EditTransaction transactionId={editingTransactionId} onUpdate={handleUpdate} />\r\n//           )}\r\n//         </ul>\r\n\r\n//         {error && <p style={{ color: 'red' }}>{error}</p>}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TransactionList;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst TransactionList = () => {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [totalAmountBilled, setTotalAmountBilled] = useState(0); \r\n  const [totalPaid, setTotalPaid] = useState([]); \r\n  const [userDebts, setUserDebts] = useState([]); \r\n  const [error, setError] = useState('');\r\n\r\n  // Функция для получения транзакций и задолженностей\r\n  const fetchTransactions = async () => {\r\n    try {\r\n      const res = await axios.get('http://localhost:5000/api/transactions', {\r\n        headers: {\r\n          Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n        },\r\n      });\r\n\r\n      // Устанавливаем данные в состояние\r\n      setTransactions(res.data.transactions);\r\n      setTotalAmountBilled(res.data.totalAmountBilled[0]?.total || 0); \r\n      setTotalPaid(res.data.totalPaid); \r\n      setUserDebts(res.data.userDebts); // Устанавливаем задолженности\r\n    } catch (err) {\r\n      setError(err.response ? err.response.data.msg : 'Что-то пошло не так');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTransactions();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h1>История транзакций</h1>\r\n      \r\n      {/* Отображение задолженностей пользователей */}\r\n      <div>\r\n        <h2>Задолженности пользователей</h2>\r\n        <ul>\r\n          {userDebts.map((debt, index) => (\r\n            <li key={index}>\r\n              Пользователь: {debt.user}, Долг: {debt.debt}, Оплачено: {debt.totalPaid}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n      \r\n      <h2>Транзакции</h2>\r\n      <ul>\r\n        {transactions.map((transaction) => (\r\n          <li key={transaction._id}>\r\n            <p>ID транзакции: {transaction._id}</p>\r\n            <p>Добавлено пользователем: {transaction.user.username}</p>\r\n            <p>Начислено: {transaction.amountBilled}</p>\r\n            <p>Оплачено: {transaction.amountPaid}</p>\r\n            <p>Сальдо: {transaction.balance}</p>\r\n            <p>Долг: {transaction.debt}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}