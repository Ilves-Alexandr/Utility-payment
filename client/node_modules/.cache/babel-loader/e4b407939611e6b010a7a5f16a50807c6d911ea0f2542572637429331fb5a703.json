{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\San\\\\Desktop\\\\projects\\\\testTest \\u2014 \\u043A\\u043E\\u043F\\u0438\\u044F\\\\client\\\\src\\\\components\\\\TransactionList.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Link } from 'react-router-dom';\n// import axios from 'axios';\n// import TransactionItem from './TransactionItem';\n// import EditTransaction from './EditTransaction';\n\n// const TransactionList = () => {\n//   const [transactions, setTransactions] = useState([]);\n//   const [transactionId, setTransactionId] = useState(null);\n//   const [error, setError] = useState('');\n\n//   useEffect(() => {\n//     const fetchTransactions = async () => {\n//       try {\n//         const res = await axios.get('http://localhost:5000/api/transactions', {\n//           headers: {\n//             Authorization: `Bearer ${localStorage.getItem('token')}`,\n//           },\n//         });\n//         setTransactions(res.data);\n//       } catch (err) {\n//         setError(err.response ? err.response.data.msg : 'Something went wrong');\n//       }\n//     };\n//     fetchTransactions();\n//   }, []);\n//   const handleDelete = async () => {\n//     // После удаления обновляем список\n//     axios.get('/api/transactions', {\n//       headers: {\n//         Authorization: `Bearer ${localStorage.getItem('token')}`,\n//       },\n//     })\n//       .then(response => setTransactions(response.data))\n//       .catch(error => console.error('Ошибка при загрузке транзакций:', error));\n//   };\n\n//   const handleEditClick = (id) => {\n//     setTransactionId(id);\n//   };\n\n//   return (\n//     <div>\n//       <h1>История транзакций</h1>\n//       <ul>\n//         <h2>Общие начисления</h2>\n//         {transactions.map((transaction) => (\n//           <li key={transaction._id}>\n//             <p>transaction._id {transaction._id}</p>\n//             <p>Добавлено пользователем(id): {transaction.user}</p>\n//             <p>Начислено: {transaction.amountBilled}</p>\n//             <p>Оплачено: {transaction.amountPaid}</p>\n//             <p>Сальдо: {transaction.balance}</p>\n//             <p>Долг: {transaction.debt}</p>\n//             <p>Дата и Время: {new Date(transaction.date).toLocaleString()}</p>\n//             <TransactionItem transaction={transaction} onDelete={handleDelete} />\n//             <button onClick={() => setEditingTransaction(transaction._id)}>Редактировать</button>\n//             <Link to={`/edit-transaction/${transaction._id}`}>Редактировать</Link>\n//           </li>\n//         ))}\n//         {editingTransaction && (\n//           <EditTransaction transactionId={editingTransaction} onUpdate={handleUpdate} />\n//         )}\n//       </ul>\n//       <ul>\n//         <h2>Начисления №1</h2>\n//         {transactions.map((transaction) => (\n//           <li key={transaction._id}>\n//             <p>Добавлено пользователем(id): {transaction.user}</p>\n//             <p>Начислено: {transaction.sharebilled}</p>\n//             <p>Оплачено: {transaction.amountPaid}</p>\n//             {/* <p>Сальдо: {transaction.balance}</p> */}\n//             {/* <p>Долг: {transaction.debt}</p> */}\n//             <p>Дата и Время: {new Date(transaction.date).toLocaleString()}</p>\n//             <TransactionItem transaction={transaction} onDelete={handleDelete} />\n//             <button onClick={() => setEditingTransaction(transaction._id)}>Редактировать</button>\n//             <Link to={`/edit-transaction/${transaction._id}`}>Редактировать</Link>\n//           </li>\n//         ))}\n//         {editingTransaction && (\n//           <EditTransaction transactionId={editingTransaction} onUpdate={handleUpdate} />\n//         )}\n//       </ul>\n//       <ul>\n//         <h2>Начисления №2</h2>\n//         {transactions.map((transaction) => (\n//           <li key={transaction._id}>\n//             <p>Добавлено пользователем(id): {transaction.user}</p>\n//             <p>Начислено: {transaction.sharebilled}</p>\n//             <p>Оплачено: {transaction.amountPaid}</p>\n//             {/* <p>Сальдо: {transaction.balance}</p> */}\n//             {/* <p>Долг: {transaction.debt}</p> */}\n//             <p>Дата и Время: {new Date(transaction.date).toLocaleString()}</p>\n//             <TransactionItem transaction={transaction} onDelete={handleDelete} />\n//             <button onClick={() => setEditingTransaction(transaction._id)}>Редактировать</button>\n//             <Link to={`/edit-transaction/${transaction._id}`}>Редактировать</Link>\n//           </li>\n//         ))}\n//         {editingTransaction && (\n//           <EditTransaction transactionId={editingTransaction} onUpdate={handleUpdate} />\n//         )}\n//       </ul>\n//       <hr></hr>\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\n//     </div>\n//   );\n// };\n\n// export default TransactionList;\n\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport TransactionItem from './TransactionItem';\nimport EditTransaction from './EditTransaction';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionList = () => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [transactionId, setTransactionId] = useState(null); // Для хранения ID транзакции для редактирования\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const fetchTransactions = async () => {\n      try {\n        const res = await axios.get('http://localhost:5000/api/transactions', {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        setTransactions(res.data);\n      } catch (err) {\n        setError(err.response ? err.response.data.msg : 'Something went wrong');\n      }\n    };\n    fetchTransactions();\n  }, []);\n  const handleDelete = async () => {\n    // После удаления обновляем список\n    axios.get('http://localhost:5000/api/transactions', {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    }).then(response => setTransactions(response.data)).catch(error => console.error('Ошибка при загрузке транзакций:', error));\n  };\n  const handleEditClick = id => {\n    setTransactionId(id); // Устанавливаем ID для редактирования\n  };\n  const handleUpdate = async () => {\n    // Функция для обновления списка после редактирования\n    const res = await axios.get('http://localhost:5000/api/transactions', {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    setTransactions(res.data);\n    setTransactionId(null); // Сбрасываем ID редактируемой транзакции\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u0418\\u0441\\u0442\\u043E\\u0440\\u0438\\u044F \\u0442\\u0440\\u0430\\u043D\\u0437\\u0430\\u043A\\u0446\\u0438\\u0439\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u041E\\u0431\\u0449\\u0438\\u0435 \\u043D\\u0430\\u0447\\u0438\\u0441\\u043B\\u0435\\u043D\\u0438\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), transactions.map(transaction => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"transaction._id \", transaction._id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u0414\\u043E\\u0431\\u0430\\u0432\\u043B\\u0435\\u043D\\u043E \\u043F\\u043E\\u043B\\u044C\\u0437\\u043E\\u0432\\u0430\\u0442\\u0435\\u043B\\u0435\\u043C(id): \", transaction.user]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u041D\\u0430\\u0447\\u0438\\u0441\\u043B\\u0435\\u043D\\u043E: \", transaction.amountBilled]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u041E\\u043F\\u043B\\u0430\\u0447\\u0435\\u043D\\u043E: \", transaction.amountPaid]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u0421\\u0430\\u043B\\u044C\\u0434\\u043E: \", transaction.balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u0414\\u043E\\u043B\\u0433: \", transaction.debt]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u0414\\u0430\\u0442\\u0430 \\u0438 \\u0412\\u0440\\u0435\\u043C\\u044F: \", new Date(transaction.date).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(TransactionItem, {\n          transaction: transaction,\n          onDelete: handleDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleEditClick(transaction._id),\n          children: \"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this)]\n      }, transaction._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), transactionId && /*#__PURE__*/_jsxDEV(EditTransaction, {\n      transactionId: transactionId,\n      onUpdate: handleUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionList, \"WTF0M8FQnnQlEdMkDlJqOg+3pWY=\");\n_c = TransactionList;\nexport default TransactionList;\nvar _c;\n$RefreshReg$(_c, \"TransactionList\");","map":{"version":3,"names":["React","useState","useEffect","Link","axios","TransactionItem","EditTransaction","jsxDEV","_jsxDEV","TransactionList","_s","transactions","setTransactions","transactionId","setTransactionId","error","setError","fetchTransactions","res","get","headers","Authorization","localStorage","getItem","data","err","response","msg","handleDelete","then","catch","console","handleEditClick","id","handleUpdate","children","fileName","_jsxFileName","lineNumber","columnNumber","map","transaction","_id","user","amountBilled","amountPaid","balance","debt","Date","date","toLocaleString","onDelete","onClick","onUpdate","style","color","_c","$RefreshReg$"],"sources":["C:/Users/San/Desktop/projects/testTest — копия/client/src/components/TransactionList.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { Link } from 'react-router-dom';\r\n// import axios from 'axios';\r\n// import TransactionItem from './TransactionItem';\r\n// import EditTransaction from './EditTransaction';\r\n\r\n// const TransactionList = () => {\r\n//   const [transactions, setTransactions] = useState([]);\r\n//   const [transactionId, setTransactionId] = useState(null);\r\n//   const [error, setError] = useState('');\r\n\r\n//   useEffect(() => {\r\n//     const fetchTransactions = async () => {\r\n//       try {\r\n//         const res = await axios.get('http://localhost:5000/api/transactions', {\r\n//           headers: {\r\n//             Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n//           },\r\n//         });\r\n//         setTransactions(res.data);\r\n//       } catch (err) {\r\n//         setError(err.response ? err.response.data.msg : 'Something went wrong');\r\n//       }\r\n//     };\r\n//     fetchTransactions();\r\n//   }, []);\r\n//   const handleDelete = async () => {\r\n//     // После удаления обновляем список\r\n//     axios.get('/api/transactions', {\r\n//       headers: {\r\n//         Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n//       },\r\n//     })\r\n//       .then(response => setTransactions(response.data))\r\n//       .catch(error => console.error('Ошибка при загрузке транзакций:', error));\r\n//   };\r\n\r\n//   const handleEditClick = (id) => {\r\n//     setTransactionId(id);\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>История транзакций</h1>\r\n//       <ul>\r\n//         <h2>Общие начисления</h2>\r\n//         {transactions.map((transaction) => (\r\n//           <li key={transaction._id}>\r\n//             <p>transaction._id {transaction._id}</p>\r\n//             <p>Добавлено пользователем(id): {transaction.user}</p>\r\n//             <p>Начислено: {transaction.amountBilled}</p>\r\n//             <p>Оплачено: {transaction.amountPaid}</p>\r\n//             <p>Сальдо: {transaction.balance}</p>\r\n//             <p>Долг: {transaction.debt}</p>\r\n//             <p>Дата и Время: {new Date(transaction.date).toLocaleString()}</p>\r\n//             <TransactionItem transaction={transaction} onDelete={handleDelete} />\r\n//             <button onClick={() => setEditingTransaction(transaction._id)}>Редактировать</button>\r\n//             <Link to={`/edit-transaction/${transaction._id}`}>Редактировать</Link>\r\n//           </li>\r\n//         ))}\r\n//         {editingTransaction && (\r\n//           <EditTransaction transactionId={editingTransaction} onUpdate={handleUpdate} />\r\n//         )}\r\n//       </ul>\r\n//       <ul>\r\n//         <h2>Начисления №1</h2>\r\n//         {transactions.map((transaction) => (\r\n//           <li key={transaction._id}>\r\n//             <p>Добавлено пользователем(id): {transaction.user}</p>\r\n//             <p>Начислено: {transaction.sharebilled}</p>\r\n//             <p>Оплачено: {transaction.amountPaid}</p>\r\n//             {/* <p>Сальдо: {transaction.balance}</p> */}\r\n//             {/* <p>Долг: {transaction.debt}</p> */}\r\n//             <p>Дата и Время: {new Date(transaction.date).toLocaleString()}</p>\r\n//             <TransactionItem transaction={transaction} onDelete={handleDelete} />\r\n//             <button onClick={() => setEditingTransaction(transaction._id)}>Редактировать</button>\r\n//             <Link to={`/edit-transaction/${transaction._id}`}>Редактировать</Link>\r\n//           </li>\r\n//         ))}\r\n//         {editingTransaction && (\r\n//           <EditTransaction transactionId={editingTransaction} onUpdate={handleUpdate} />\r\n//         )}\r\n//       </ul>\r\n//       <ul>\r\n//         <h2>Начисления №2</h2>\r\n//         {transactions.map((transaction) => (\r\n//           <li key={transaction._id}>\r\n//             <p>Добавлено пользователем(id): {transaction.user}</p>\r\n//             <p>Начислено: {transaction.sharebilled}</p>\r\n//             <p>Оплачено: {transaction.amountPaid}</p>\r\n//             {/* <p>Сальдо: {transaction.balance}</p> */}\r\n//             {/* <p>Долг: {transaction.debt}</p> */}\r\n//             <p>Дата и Время: {new Date(transaction.date).toLocaleString()}</p>\r\n//             <TransactionItem transaction={transaction} onDelete={handleDelete} />\r\n//             <button onClick={() => setEditingTransaction(transaction._id)}>Редактировать</button>\r\n//             <Link to={`/edit-transaction/${transaction._id}`}>Редактировать</Link>\r\n//           </li>\r\n//         ))}\r\n//         {editingTransaction && (\r\n//           <EditTransaction transactionId={editingTransaction} onUpdate={handleUpdate} />\r\n//         )}\r\n//       </ul>\r\n//       <hr></hr>\r\n//       {error && <p style={{ color: 'red' }}>{error}</p>}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TransactionList;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport TransactionItem from './TransactionItem';\r\nimport EditTransaction from './EditTransaction';\r\n\r\nconst TransactionList = () => {\r\n  const [transactions, setTransactions] = useState([]);\r\n  const [transactionId, setTransactionId] = useState(null); // Для хранения ID транзакции для редактирования\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchTransactions = async () => {\r\n      try {\r\n        const res = await axios.get('http://localhost:5000/api/transactions', {\r\n          headers: {\r\n            Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n          },\r\n        });\r\n        setTransactions(res.data);\r\n      } catch (err) {\r\n        setError(err.response ? err.response.data.msg : 'Something went wrong');\r\n      }\r\n    };\r\n    fetchTransactions();\r\n  }, []);\r\n\r\n  const handleDelete = async () => {\r\n    // После удаления обновляем список\r\n    axios.get('http://localhost:5000/api/transactions', {\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n      },\r\n    })\r\n      .then(response => setTransactions(response.data))\r\n      .catch(error => console.error('Ошибка при загрузке транзакций:', error));\r\n  };\r\n\r\n  const handleEditClick = (id) => {\r\n    setTransactionId(id); // Устанавливаем ID для редактирования\r\n  };\r\n\r\n  const handleUpdate = async () => {\r\n    // Функция для обновления списка после редактирования\r\n    const res = await axios.get('http://localhost:5000/api/transactions', {\r\n      headers: {\r\n        Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n      },\r\n    });\r\n    setTransactions(res.data);\r\n    setTransactionId(null); // Сбрасываем ID редактируемой транзакции\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>История транзакций</h1>\r\n      <ul>\r\n        <h2>Общие начисления</h2>\r\n        {transactions.map((transaction) => (\r\n          <li key={transaction._id}>\r\n            <p>transaction._id {transaction._id}</p>\r\n            <p>Добавлено пользователем(id): {transaction.user}</p>\r\n            <p>Начислено: {transaction.amountBilled}</p>\r\n            <p>Оплачено: {transaction.amountPaid}</p>\r\n            <p>Сальдо: {transaction.balance}</p>\r\n            <p>Долг: {transaction.debt}</p>\r\n            <p>Дата и Время: {new Date(transaction.date).toLocaleString()}</p>\r\n            <TransactionItem transaction={transaction} onDelete={handleDelete} />\r\n            <button onClick={() => handleEditClick(transaction._id)}>Редактировать</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {/* Условно отображаем компонент редактирования */}\r\n      {transactionId && (\r\n        <EditTransaction transactionId={transactionId} onUpdate={handleUpdate} />\r\n      )}\r\n\r\n      <hr />\r\n      {error && <p style={{ color: 'red' }}>{error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionList;\r\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}